var FPS = 60;
var canvas;

function initCanvas() {
    canvas = document.getElementsByTagName("canvas")[0].getContext("2d");
    // Read in all the images
    var images = [
        "<%= asset_path('and-off.svg') %>",
        "<%= asset_path('and-on.svg') %>",
        "<%= asset_path('or-off.svg') %>",
        "<%= asset_path('or-on.svg') %>",
        "<%= asset_path('not-off.svg') %>",
        "<%= asset_path('not-on.svg') %>"
    ];
    pieceAssets = new Array(images.length);
    images.forEach(
        function(element, index){
            pieceAssets[index] = new Image();
            pieceAssets[index].src = element;
            pieceAssets[index].onload = redraw;
        }
    );

    // Read in all the images
    images = [
        "<%= asset_path('input-off.svg') %>",
        "<%= asset_path('input-on.svg') %>",
        "<%= asset_path('output-incorrect.svg') %>",
        "<%= asset_path('output-correct.svg') %>"
    ];
    portAssets = new Array(images.length);
    images.forEach(
        function(element, index){
            portAssets[index] = new Image();
            portAssets[index].src = element;
            portAssets[index].onload = redraw;
        }
    );

    wireAssets = new Array(16);
    <% for a in (0..1) %>
        <% for b in (0..1) %>
            <% for c in (0..1) %>
                <% for d in (0..1) %>
                    <% num = a == 1 ? 8 : 0 %>
                    <% num = num | 4 if b == 1 %>
                    <% num = num | 2 if c == 1 %>
                    <% num = num | 1 if d == 1 %>
    wireAssets[<%= num %>] = new Array(2);
                    <% for e in (0..1) %>
    wireAssets[<%= num %>][<%= e %>] = new Image();
    wireAssets[<%= num %>][<%= e %>].src = "<%= asset_path("wires/#{a}#{b}#{c}#{d}-#{(e == 1 ? "on" : "off")}.svg") %>";
                    <% end %>
                <% end %>
            <% end %>
        <% end %>
    <% end %>
}

function draw(board, canvas) {
    canvas.fillStyle = "#222222";
    canvas.fillRect(
        board.boardX - 5,
        board.boardY - 5,
        board.boardWidth + 10,
        board.boardHeight + board.unit + 20
    );
    for (var x = 0; x < board.gameWidth; x++) {
        for (var y = 0; y < board.gameHeight; y++) {
            canvas.fillStyle = "#111111";
            canvas.fillRect(
                board.unit * x + board.boardX,
                board.unit * y + board.boardY,
                board.unit,
                board.unit
            );
            canvas.fillStyle = "#000000";
            canvas.fillRect(
                board.unit * x + board.boardX + 5,
                board.unit * y + board.boardY + 5,
                board.unit - 10,
                board.unit - 10
            );
            if (board.layout[x][y] != null) {
                canvas.drawImage(
                    wireAsset(board.wireStyle[x][y], board.answer[x][y]),
                    board.unit * x + board.boardX,
                    board.unit * y + board.boardY,
                    board.unit,
                    board.unit
                );
            }
            var piece = pieceAsset(board.layout[x][y], board.answer[x][y]);
            if (piece != null) {
                canvas.drawImage(
                    piece,
                    board.unit * x + board.boardX,
                    board.unit * y + board.boardY,
                    board.unit,
                    board.unit
                );
            }

        }
    }
    board.inputLocations.forEach(
        function(element, index){
            canvas.drawImage(
                portAssets[board.inputs[index][board.state] ? 1 : 0],
                board.boardX,
                board.unit * element + board.boardY,
                board.unit,
                board.unit
            );
        }
    );
    board.outputLocations.forEach(
        function(element, index){
            // This is just weird
            answer = board.answer[board.gameWidth - 1][element] == undefined ? false : board.answer[board.gameWidth - 1][element];
            canvas.drawImage(
                portAssets[board.outputs[index][board.state] == answer ? 3 : 2],
                (board.unit * (board.gameWidth - 1)) + board.boardX,
                board.unit * element + board.boardY,
                board.unit,
                board.unit
            );
        }
    );
    for (var x = 0; x < board.gameWidth; x++) {
        canvas.fillStyle = "#333333";
        canvas.fillRect(
            board.unit * x + board.boardX,
            board.boardHeight + board.boardY + 10,
            board.unit,
            board.unit
        );
        canvas.fillStyle = "#222222";
        canvas.fillRect(
            board.unit * x + board.boardX + 5,
            board.boardHeight + board.boardY + 15,
            board.unit - 10,
            board.unit - 10
        );
        if (x < board.pieces.length) {
            canvas.drawImage(
                pieceAsset(board.pieces[x], false),
                board.unit * x + board.boardX,
                board.boardHeight + board.boardY + 10,
                board.unit,
                board.unit
            );
        }
    }
}

function redraw() {
    clear(canvas);
    draw(board, canvas);
    if (mouseDown && ![0, null, undefined].includes(currentPiece)) {
        canvas.drawImage(
            pieceAsset(currentPiece, false),
            mouseX - (board.unit * 0.6),
            mouseY - (board.unit * 0.6),
            board.unit * 1.2,
            board.unit * 1.2
        );
    }
}

var redrawTread;
function startRedraw() {
    if (redrawTread == null) {
        redrawTread = setInterval(redraw, 1000 / FPS);
    }
}

function stopRedraw() {
    if (redrawTread != null) {
        clearInterval(redrawTread);
        redrawTread = null;
    }
}

function clear(canvas) {
    if (canvas != null){
        canvas.clearRect(0, 0, window.innerWidth, window.innerHeight);
    }
}


// This will return the image that is associated with a piece number then the given state if on or off
function pieceAsset(num, bool) {
    if (num > 0) return pieceAssets[(2 * num) - (bool ? 1 : 2)];
}

function wireAsset(num, bool) {
    return wireAssets[num][bool ? 1 : 0];
}
